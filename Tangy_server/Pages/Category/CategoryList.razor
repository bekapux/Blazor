@page "/category"

@inject ICategoryRepository CategoryRepository
@inject IJSRuntime JS

<_DeleteConfirmationComponent IsParentComponentProcessing="IsLoading" ConfirmDelete="ConfirmDelete"></_DeleteConfirmationComponent>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-info form-control">Add New Category</a>
    </div>
</div>

<div class="row">
    @if (Categories.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Categories)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>
                            <a class="btn btn-info" href="/category/create/@item.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <p>No Records Found</p>
        }
    }
</div>

@code {
    private IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();

    private int DeleteCategoryId { get; set; } = 0;

    private bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) await LoadCategories();
    }

    private async Task HandleDelete(int id)
    {
        DeleteCategoryId = id;
        await JS.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteCategoryId != 0) await CategoryRepository.Delete(DeleteCategoryId);
        await JS.InvokeVoidAsync("HideDeleteConfirmationModal");
        await LoadCategories();
        IsLoading = false;
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await CategoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
}
